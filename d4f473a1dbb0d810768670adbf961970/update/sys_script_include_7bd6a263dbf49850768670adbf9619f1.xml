<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_58056_aws_sns_int.AWSSNSLogger</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AWSSNSLogger</name>
        <script><![CDATA[var AWSSNSLogger = Class.create();

AWSSNSLogger.prototype = {
  /**
   * Initialize variables
   */
  initialize: function (source) {
    if (!gs.nil(source)) {
      this.source = source;
    } else {
      this.source = this.type;
    }
    this.loggingLevel = gs.getProperty("x_58056_aws_sns_int.aws_sns.logging_level", "info");
    this.logDebug = this.loggingLevel == "debug";
    this.logInfo = this.loggingLevel == "info" || this.logDebug;
    this.logWarnings = this.loggingLevel == "warn" || this.logInfo;
    this.logErrors = this.loggingLevel == "error" || this.logWarnings;
  },

  /**
   * Add a new record to the REST Transaction Log table to document
   * the results of a REST call
   *
   * @param {string} type - type of transaction
   * @param {string} direction - Inbound or Outbound
   * @param {object} fieldValues - Name/value pairs of the fields to populate
   *
   * @returns {sys_id} - sys_id of transaction log record
   */
  addRESTTransactionLog: function (type, direction, fieldValues) {
    var logMsg = [];

    var txnGR = new GlideRecord("x_58056_aws_sns_int_rest_transaction_log");
    txnGR.initialize();
    txnGR.transaction_type = type;
    if (!gs.nil(direction)) {
      txnGR.direction = direction;
    } else {
      txnGR.direction = this.OUTBOUND_DIRECTION;
    }

    for (fieldName in fieldValues) {
      var value = fieldValues[fieldName];
      if (Array.isArray(value)) {
        value = value.join("\n");
      }
      if (txnGR.isValidField(fieldName) && !gs.nil(value)) {
        txnGR[fieldName] = value;
        logMsg.push(fieldName + ": " + value);
      }
    }

    if (txnGR.method.nil()) {
      txnGR.method = this.DEFAULT_METHOD;
    }

    this.log(logMsg.join("\n\n"));
    return txnGR.insert();
  },

  _buildMessage: function (msg) {
    return "[" + this.source + "] " + msg;
  },

  /**
   * Adds an error message to the system log.
   *
   * @param {string} msg Message to add to system log.
   */
  logError: function (msg) {
    if (this.logErrors) {
      gs.error(this._buildMessage(msg));
    }
  },

  /**
   * Adds a warning message to the system log.
   *
   * @param {string} msg Message to add to the system log.
   */
  logWarning: function (msg) {
    if (this.logWarnings) {
      gs.warn(this._buildMessage(msg));
    }
  },

  /**
   * Adds a message to the system log
   *
   * @param {String} msg Message to add to the system log.
   */
  log: function (msg) {
    if (this.logInfo) {
      gs.info(this._buildMessage(msg));
    }
  },

  /**
   * Adds a debug message to the system log
   *
   * @param {String} msg Message to add to the system log.
   */
  debug: function (msg) {
    if (this.logDebug) {
      gs.info(this._buildMessage(msg));
    }
  },

  type: "AWSSNSLogger",
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-21 23:04:46</sys_created_on>
        <sys_id>7bd6a263dbf49850768670adbf9619f1</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>AWSSNSLogger</sys_name>
        <sys_package display_value="AWS SNS Integration" source="x_58056_aws_sns_int">d4f473a1dbb0d810768670adbf961970</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AWS SNS Integration">d4f473a1dbb0d810768670adbf961970</sys_scope>
        <sys_update_name>sys_script_include_7bd6a263dbf49850768670adbf9619f1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-14 23:59:41</sys_updated_on>
    </sys_script_include>
</record_update>
